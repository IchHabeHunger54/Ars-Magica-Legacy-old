buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "JaredMaven"
        url = "https://maven.blamejared.com"
    }
    maven {
        name = "MinecraftschurliMaven"
        url = "${mcs_maven_url}"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

apply plugin: 'idea'

version = "${mcVersion}-${modVersion}"
group = modGroup
archivesBaseName = modBaseName

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_1_8

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiCompile.extendsFrom(compile)
}

minecraft {
    mappings channel: 'snapshot', version: "${mcpMappings}"
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            ideaModule "${project.name}.main"

            mods {
                arsmagicalegacy {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            ideaModule "${project.name}.main"

            mods {
                arsmagicalegacy {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            args '--mod', modBaseName, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            ideaModule "${project.name}.main"

            mods {
                arsmagicalegacy {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${forgeVersion}"

    compileOnly fg.deobf("mezz.jei:jei-${mcVersion}:${jeiVersion}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mcVersion}:${jeiVersion}")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${mcVersion}-${patchouliVersion}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${mcVersion}-${patchouliVersion}")

    compile fg.deobf("minecraftschurli:simpleorelib:${mcVersion}-1.0.0.0")
}

jar {
    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.main.output.resourcesDir

    manifest {
        attributes([
                "Specification-Title": "${modName}",
                "Specification-Vendor": "${modGroup}",
                "Specification-Version": "${mcVersion}",
                "Implementation-Title": project.name,
                "Implementation-Version": "${modVersion}",
                "Implementation-Vendor" :"${modGroup}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // Replace version
        expand 'version': project.version
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

task apiJar(type: Jar) {
    classifier = "api"
    from sourceSets.api.output

    // TODO: when FG bug is fixed, remove allJava from the api jar.
    // https://github.com/MinecraftForge/ForgeGradle/issues/369
    // Gradle should be able to pull them from the -sources jar.
    from sourceSets.api.allJava
}

artifacts {
    archives javadocJar
    archives sourcesJar
    archives apiJar
}

task uploadJars(dependsOn: build) {
    description = "uploads JARs"
    apply plugin: "maven"
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: mcs_maven_url) {
                    authentication(userName: mcs_maven_user, password: mcs_maven_pass)
                }
            }
        }
    }
}
